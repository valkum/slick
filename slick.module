<?php

/**
 * @file
 * Slick carousel for Drupal.
 */

/**
 * Implements hook_views_api().
 */
function slick_views_api() {
  return array(
    'api' => '3',
  );
}

/**
 * Implements hook_theme().
 */
function slick_theme() {
  return array(
    'slick_carousel' => array(
      'variables' => array('items' => NULL, 'options' => NULL),
      'template' => 'theme/slick-carousel',
      'file' => 'theme/slick.theme.inc',
    ),
  );
}

/**
 * Defines a list of options available for slick.
 */
function slick_get_options() {
  $options = array();

  $options['accessibility'] = array(
    'name' => 'accessibility',
    'title' => t('Accessibility'),
    'description' => t('Enables tabbing and arrow key navigation'),
    'type' => 'boolean',
    'default' => TRUE,
  );

  $options['vertical'] = array(
    'name' => 'vertical',
    'title' => t('Vertical'),
    'description' => t('Vertical slide direction'),
    'type' => 'boolean',
    'default' => FALSE,
  );

  $options['autoplay'] = array(
    'name' => 'autoplay',
    'title' => t('Autoplay'),
    'description' => t('Enables Autoplay'),
    'type' => 'boolean',
    'default' => FALSE,
  );

  $options['autoplayspeed'] = array(
    'name' => 'autoplaySpeed',
    'title' => t('Autoplay speed'),
    'description' => t('Autoplay Speed in milliseconds'),
    'type' => 'integer',
    'default' => 3000,
  );

  $options['arrows'] = array(
    'name' => 'arrows',
    'title' => t('Arrows'),
    'description' => t('Show prev/next arrows'),
    'type' => 'boolean',
    'default' => TRUE,
  );

  $options['dots'] = array(
    'name' => 'dots',
    'title' => t('Dots'),
    'description' => t('Current slide indicator dots'),
    'type' => 'boolean',
    'default' => FALSE,
  );

  $options['draggable'] = array(
    'name' => 'draggable',
    'title' => t('Draggable'),
    'description' => t('Enable mouse dragging'),
    'type' => 'boolean',
    'default' => TRUE,
  );

  $options['swipe'] = array(
    'name' => 'swipe',
    'title' => t('Swipe'),
    'description' => t('Enable swiping'),
    'type' => 'boolean',
    'default' => TRUE,
  );

  $options['touchmove'] = array(
    'name' => 'touchMove',
    'title' => t('TouchMove'),
    'description' => t('Enable slide motion with touch'),
    'type' => 'boolean',
    'default' => TRUE,
  );

  $options['touchthreshold'] = array(
    'name' => 'touchThreshold',
    'title' => t('touchThreshold'),
    'description' => t('Swipe distance threshold'),
    'type' => 'integer',
    'default' => 5,
  );

  $options['fade'] = array(
    'name' => 'fade',
    'title' => t('Fade'),
    'description' => t('Enable fade'),
    'type' => 'boolean',
    'default' => FALSE,
  );

  $options['infinite'] = array(
    'name' => 'infinite',
    'title' => t('Infinite'),
    'description' => t('Infinite loop sliding'),
    'type' => 'boolean',
    'default' => TRUE,
  );

  $options['cssease'] = array(
    'name' => 'cssEase',
    'title' => t('cssEase'),
    'description' => t('CSS3 Animation Easing'),
    'type' => 'varchar',
    'default' => 'ease',
  );

  $options['slidestoshow'] = array(
    'name' => 'slidesToShow',
    'title' => t('Slides to show'),
    'description' => t('Number of slides to show'),
    'type' => 'integer',
    'default' => 1,
  );

  $options['slidestoscroll'] = array(
    'name' => 'slidesToScroll',
    'title' => t('Slides to scroll'),
    'description' => t('Number of slides to scroll'),
    'type' => 'integer',
    'default' => 1,
  );

  $options['speed'] = array(
    'name' => 'speed',
    'title' => t('Speed'),
    'description' => t('Slide speed in milliseconds'),
    'type' => 'integer',
    'default' => 300,
  );

  return $options;
}

/**
 * Implements hook_library().
 */
function slick_library() {
  $slick_library_path = slick_get_slick_path();
  $slick_module_path = drupal_get_path('module', 'slick');
  $libraries = array();

  // Slick plugin.
  $libraries['slick'] = array(
    'title' => 'Slick',
    'website' => 'http://kenwheeler.github.io/slick/',
    'version' => '1.3.2',
    'js' => array(
      $slick_library_path . '/slick/slick.min.js' => array('group' => JS_DEFAULT),
    ),
    'css' => array(
      $slick_library_path . '/slick/slick.css' => array('group' => CSS_DEFAULT),
    ),
  );

  // Slick module.
  $libraries['drupal.slick'] = array(
    'title' => 'Slick',
    'version' => '1.0',
    'js' => array(
      $slick_module_path . '/js/slick.js' => array(),
    ),
    'css' => array(
      $slick_module_path . '/css/slick.css' => array(
        'type' => 'file',
        'media' => 'screen',
      ),
    ),
    'dependencies' => array(
      array('system', 'jquery.once'),
      array('slick', 'slick'),
    ),
  );

  return $libraries;
}

/**
 * Get the location of the slick library.
 *
 * @return string.
 *   The location of the library, or FALSE if the library isn't installed.
 */
function slick_get_slick_path() {
  if (function_exists('libraries_get_path')) {
    return libraries_get_path('slick');
  }

  // The following logic is taken from libraries_get_libraries()
  $searchdir = array();

  // Similar to 'modules' and 'themes' directories inside an installation
  // profile, installation profiles may want to place libraries into a
  // 'libraries' directory.
  $searchdir[] = 'profiles/' . drupal_get_profile() . '/libraries';

  // Always search sites/all/libraries.
  $searchdir[] = 'sites/all/libraries';

  // Also search sites/<domain>/*.
  $searchdir[] = conf_path() . '/libraries';

  foreach ($searchdir as $dir) {
    if (file_exists($dir . '/slick/slick.min.js')) {
      return $dir . '/slick';
    }
  }

  return FALSE;
}
